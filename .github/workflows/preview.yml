---
name: preview

on:
  pull_request:
    branches:
      - master

jobs:
  preview:
    env:
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CF_ACCOUNT_TOKEN }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      WRANGLER_SEND_METRICS: false
      OWNER: ${{ github.repository_owner }}
      REPOSITORY: ${{ github.repository }}
      BRANCH: ${{ github.head_ref }}
      CUSTOM_DOMAIN: nephelai.io
    if: github.event.pull_request.type != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build --production

      - name: Set worker name envvar
        run: echo "WORKER=${REPOSITORY/$OWNER\//}-${BRANCH}" >> $GITHUB_ENV

      - name: Deploy Cloudflare Worker
        uses: mathiasvr/command-output@v2.0.0
        with:
          run: |
            npm run deploy -- \
              --verbose \
              --literal GITHUB_APPLY:true \
              --secret GITHUB_TOKEN:GH_TOKEN \
              --name "$WORKER"
        id: deploy

      - name: Test deployed Cloudflare worker
        run: >
          curl -sD- --retry 10 --retry-delay 0 --retry-max-time 120 --retry-all-errors ${{ steps.deploy.outputs.stdout }}

      - name: Delete Cloudflare Worker
        uses: mathiasvr/command-output@v2.0.0
        with:
          run: |
            npm run delete -- \
              --verbose \
              --name "$WORKER"

      - name: Test Cloudflare worker deletion
        run: >
          retries=10;
          while [ $retries -gt 0 ]; do
              retries=$((retries - 1));
              output="${{ steps.deploy.outputs.stdout }}";
              url="${output//[$'\t\r\n ']}";
              echo "testing url $url"
              return_header=$(curl -sD- $url | head -1);
              return_code=$(echo "$return_header" | awk '{print $2}');
              echo "return code is $return_code";
              if [[ "$return_code" == "404" ]]; then
                  exit 0;
              fi;
              sleep 6;
              echo "retrying ..."
          done;
          exit 1;

      - name: Deploy Cloudflare Worker
        uses: mathiasvr/command-output@v2.0.0
        with:
          run: |
            echo Deploying worker "$WORKER"; \
            npm run deploy -- \
              --verbose \
              --literal GITHUB_APPLY:true \
              --secret GITHUB_TOKEN:GH_TOKEN \
              --name "$WORKER"

      - name: Set worker fqdn envvar
        run: echo "FQDN=${WORKER}-test.${CUSTOM_DOMAIN}" >> $GITHUB_ENV

      - name: Clean previous records for custom domain
        run: >
          npx cfcli --domain ${CUSTOM_DOMAIN} find $FQDN --format json |
            jq '. | map(("--type " + .type + " " + .name + " " + .content)) | .[]' -r |
            xargs npx cfcli --domain ${CUSTOM_DOMAIN} rm
        env:
          CF_API_KEY: ${{ secrets.CF_ACCOUNT_TOKEN }}

      - name: Update Cloudflare worker with custom domain
        uses: mathiasvr/command-output@v2.0.0
        with:
          run: |
            echo Deploying worker "$WORKER"; \
            npm run deploy -- \
              --verbose \
              --literal GITHUB_APPLY:true \
              --secret GITHUB_TOKEN:GH_TOKEN \
              --name "$WORKER" \
              --route "$FQDN/*"

      - name: Test custom domain resolution
        run: "dig +short $FQDN @1.1.1.1"

      - name: Test custom domain endpoint
        uses: nick-fields/retry@v2
        with:
          max_attempts: 6
          retry_on: error
          timeout_seconds: 10
          command: >
            ADDRESS="$(dig +short $FQDN @1.1.1.1 | head -1)";
            return_header=$(curl -sk "https://$FQDN" --resolve "$FQDN:443:$ADDRESS" -D- | head -1);
            return_code=$(echo "$return_header" | awk '{print $2}');
            echo "return code is $return_code";
            if [[ "$return_code" != "200" ]]; then
              exit 1;
            fi;
            curl -sk "https://$FQDN" --resolve "$FQDN:443:$ADDRESS" | grep "^Hello world"

      - name: Remove custom domain from Cloudflare worker
        uses: mathiasvr/command-output@v2.0.0
        with:
          run: |
            echo Deploying worker "$WORKER"; \
            npm run deploy -- \
              --verbose \
              --literal GITHUB_APPLY:true \
              --secret GITHUB_TOKEN:GH_TOKEN \
              --name "$WORKER";

      - name: Test custom domain resolution
        run: >
          RETRIES=6;
          SLEEP=30;
          while [[ $RETRIES > 0 ]]; do
            RETRIES=$(( RETRIES - 1 ));
            address="$(dig +short $FQDN @1.1.1.1 | head -1)";
            if [ -z "$address" ]; then
              echo "dns query for record $FQDN returned NXDOMAIN";
              exit 0;
            else
              echo "dns query for record $FQDN returned $address. retrying ...";
              sleep $SLEEP;
            fi;
          done;
          echo "dns record $FQDN is present";
          exit 1;

      - name: Delete Cloudflare Worker
        uses: mathiasvr/command-output@v2.0.0
        with:
          run: |
            npm run delete -- \
              --verbose \
              --name "$WORKER"

      - name: Install utilities
        run: sudo apt-get install -y jq httpie

      - name: Set worker dns content envvar
        run: echo "CONTENT=8.8.8.8" >> $GITHUB_ENV

      - name: Delete origin record for custom domain
        run: >
          records=$(npx cfcli --domain ${CUSTOM_DOMAIN} --type A --format json find ${FQDN} ${CONTENT} | jq '. | length' -r);
          if [[ $records -gt 0 ]]; then
            npx cfcli --domain ${CUSTOM_DOMAIN} --type A rm ${FQDN} ${CONTENT};
          fi
        env:
          CF_API_KEY: ${{ secrets.CF_ACCOUNT_TOKEN }}

      - name: Create origin record for custom domain
        run: npx cfcli --domain ${CUSTOM_DOMAIN} --activate --type A add ${FQDN} ${CONTENT}
        env:
          CF_API_KEY: ${{ secrets.CF_ACCOUNT_TOKEN }}

      - name: Check custom domain record
        run: >
          records=$(npx cfcli --domain ${CUSTOM_DOMAIN} --type A --format json find ${FQDN} ${CONTENT} | jq '. | length' -r);
          if [[ $records -eq 1 ]]; then
            exit 0;
          else
            exit 1;
          fi
        env:
          CF_API_KEY: ${{ secrets.CF_ACCOUNT_TOKEN }}

      - name: Deploy Cloudflare worker with custom domain
        uses: mathiasvr/command-output@v2.0.0
        with:
          run: |
            echo Deploying worker "$WORKER"; \
            npm run deploy -- \
              --verbose \
              --literal GITHUB_APPLY:true \
              --secret GITHUB_TOKEN:GH_TOKEN \
              --name "$WORKER" \
              --route "$FQDN/*"

      - name: Test custom domain endpoint
        run: >
          ADDRESS="$(dig +short $FQDN @1.1.1.1 | head -1)";
          return_header=$(curl -sk "https://$FQDN" --resolve "$FQDN:443:$ADDRESS" -D- | head -1);
          return_code=$(echo "$return_header" | awk '{print $2}');
          echo "return code is $return_code";
          if [[ "$return_code" != "200" ]]; then
            exit 1;
          fi;
          curl -sk "https://$FQDN" --resolve "$FQDN:443:$ADDRESS" | grep "^Hello world"

      - name: Delete Cloudflare Worker
        uses: mathiasvr/command-output@v2.0.0
        with:
          run: |
            npm run delete -- \
              --verbose \
              --name "$WORKER"

      - name: Check custom domain record
        run: >
          records=$(npx cfcli --domain ${CUSTOM_DOMAIN} --type A --format json find ${FQDN} ${CONTENT} | jq '. | length' -r);
          if [[ $records -eq 1 ]]; then
            exit 0;
          else
            exit 1;
          fi
        env:
          CF_API_KEY: ${{ secrets.CF_ACCOUNT_TOKEN }}

      - name: Destroy origin record for custom domain
        run: npx cfcli --domain ${CUSTOM_DOMAIN} --type A rm ${FQDN} ${CONTENT}
        env:
          CF_API_KEY: ${{ secrets.CF_ACCOUNT_TOKEN }}

      - name: Check custom domain record
        run: >
          records=$(npx cfcli --domain ${CUSTOM_DOMAIN} --type A --format json find ${FQDN} ${CONTENT} | jq '. | length' -r);
          if [[ $records -eq 0 ]]; then
            exit 0;
          else
            exit 1;
          fi
        env:
          CF_API_KEY: ${{ secrets.CF_ACCOUNT_TOKEN }}
